{"ast":null,"code":"\"use client\";\n\nimport React, { useEffect, useState } from 'react';\nimport { generateColor, getAlphaColor } from '../util';\nimport ColorSteppers from './ColorSteppers';\nconst ColorAlphaInput = _ref => {\n  let {\n    prefixCls,\n    value,\n    onChange\n  } = _ref;\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000'));\n  // Update step value\n  useEffect(() => {\n    if (value) {\n      setAlphaValue(value);\n    }\n  }, [value]);\n  const handleAlphaChange = step => {\n    const hsba = alphaValue.toHsb();\n    hsba.a = (step || 0) / 100;\n    const genColor = generateColor(hsba);\n    if (!value) {\n      setAlphaValue(genColor);\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\n  };\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\n    value: getAlphaColor(alphaValue),\n    prefixCls: prefixCls,\n    formatter: step => `${step}%`,\n    className: colorAlphaInputPrefixCls,\n    onChange: handleAlphaChange\n  });\n};\nexport default ColorAlphaInput;","map":{"version":3,"names":["React","useEffect","useState","generateColor","getAlphaColor","ColorSteppers","ColorAlphaInput","_ref","prefixCls","value","onChange","colorAlphaInputPrefixCls","alphaValue","setAlphaValue","handleAlphaChange","step","hsba","toHsb","a","genColor","createElement","formatter","className"],"sources":["C:/Users/golov/coding/git_repo_practice/react-node-app-7/client/node_modules/antd/es/color-picker/components/ColorAlphaInput.js"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { generateColor, getAlphaColor } from '../util';\r\nimport ColorSteppers from './ColorSteppers';\r\nconst ColorAlphaInput = _ref => {\r\n  let {\r\n    prefixCls,\r\n    value,\r\n    onChange\r\n  } = _ref;\r\n  const colorAlphaInputPrefixCls = `${prefixCls}-alpha-input`;\r\n  const [alphaValue, setAlphaValue] = useState(generateColor(value || '#000'));\r\n  // Update step value\r\n  useEffect(() => {\r\n    if (value) {\r\n      setAlphaValue(value);\r\n    }\r\n  }, [value]);\r\n  const handleAlphaChange = step => {\r\n    const hsba = alphaValue.toHsb();\r\n    hsba.a = (step || 0) / 100;\r\n    const genColor = generateColor(hsba);\r\n    if (!value) {\r\n      setAlphaValue(genColor);\r\n    }\r\n    onChange === null || onChange === void 0 ? void 0 : onChange(genColor);\r\n  };\r\n  return /*#__PURE__*/React.createElement(ColorSteppers, {\r\n    value: getAlphaColor(alphaValue),\r\n    prefixCls: prefixCls,\r\n    formatter: step => `${step}%`,\r\n    className: colorAlphaInputPrefixCls,\r\n    onChange: handleAlphaChange\r\n  });\r\n};\r\nexport default ColorAlphaInput;"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,aAAa,EAAEC,aAAa,QAAQ,SAAS;AACtD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,MAAMC,eAAe,GAAGC,IAAI,IAAI;EAC9B,IAAI;IACFC,SAAS;IACTC,KAAK;IACLC;EACF,CAAC,GAAGH,IAAI;EACR,MAAMI,wBAAwB,GAAI,GAAEH,SAAU,cAAa;EAC3D,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAACC,aAAa,CAACM,KAAK,IAAI,MAAM,CAAC,CAAC;EAC5E;EACAR,SAAS,CAAC,MAAM;IACd,IAAIQ,KAAK,EAAE;MACTI,aAAa,CAACJ,KAAK,CAAC;IACtB;EACF,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EACX,MAAMK,iBAAiB,GAAGC,IAAI,IAAI;IAChC,MAAMC,IAAI,GAAGJ,UAAU,CAACK,KAAK,CAAC,CAAC;IAC/BD,IAAI,CAACE,CAAC,GAAG,CAACH,IAAI,IAAI,CAAC,IAAI,GAAG;IAC1B,MAAMI,QAAQ,GAAGhB,aAAa,CAACa,IAAI,CAAC;IACpC,IAAI,CAACP,KAAK,EAAE;MACVI,aAAa,CAACM,QAAQ,CAAC;IACzB;IACAT,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACS,QAAQ,CAAC;EACxE,CAAC;EACD,OAAO,aAAanB,KAAK,CAACoB,aAAa,CAACf,aAAa,EAAE;IACrDI,KAAK,EAAEL,aAAa,CAACQ,UAAU,CAAC;IAChCJ,SAAS,EAAEA,SAAS;IACpBa,SAAS,EAAEN,IAAI,IAAK,GAAEA,IAAK,GAAE;IAC7BO,SAAS,EAAEX,wBAAwB;IACnCD,QAAQ,EAAEI;EACZ,CAAC,CAAC;AACJ,CAAC;AACD,eAAeR,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}