{"ast":null,"code":"\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport React, { useContext } from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport { AppConfigContext } from '../app/context';\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useMessage, { useInternalMessage } from './useMessage';\nimport { wrapPromiseFn } from './util';\nlet message = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    getContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  } = defaultGlobalConfig;\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\n  return {\n    getContainer: () => mergedContainer,\n    duration,\n    rtl,\n    maxCount,\n    top\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    messageConfig,\n    sync\n  } = props;\n  const {\n    getPrefixCls\n  } = useContext(ConfigContext);\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\n  const appConfig = useContext(AppConfigContext);\n  const [api, holder] = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\n    prefixCls\n  }), appConfig.message));\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return holder;\n});\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [messageConfig, setMessageConfig] = React.useState(getGlobalContext);\n  const sync = () => {\n    setMessageConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const theme = global.getTheme();\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\n    ref: ref,\n    sync: sync,\n    messageConfig: messageConfig\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, global.holderRender ? global.holderRender(dom) : dom);\n});\nfunction flushNotice() {\n  if (!message) {\n    const holderFragment = document.createDocumentFragment();\n    const newMessage = {\n      fragment: holderFragment\n    };\n    message = newMessage;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          // React 18 test env will throw if call immediately in ref\n          Promise.resolve().then(() => {\n            if (!newMessage.instance && instance) {\n              newMessage.instance = instance;\n              newMessage.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!message.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    const {\n      type,\n      skipped\n    } = task;\n    // Only `skipped` when user call notice but cancel it immediately\n    // and instance not ready\n    if (!skipped) {\n      switch (type) {\n        case 'open':\n          {\n            act(() => {\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n            break;\n          }\n        case 'destroy':\n          act(() => {\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\n          });\n          break;\n        // Other type open\n        default:\n          {\n            act(() => {\n              var _message$instance;\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\n              task.setCloseFn(closeFn);\n            });\n          }\n      }\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setMessageGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\n  });\n}\nfunction open(config) {\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type: 'open',\n      config,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction typeOpen(type, args) {\n  const global = globalConfig();\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\n    warnContext('message');\n  }\n  const result = wrapPromiseFn(resolve => {\n    let closeFn;\n    const task = {\n      type,\n      args,\n      resolve,\n      setCloseFn: fn => {\n        closeFn = fn;\n      }\n    };\n    taskQueue.push(task);\n    return () => {\n      if (closeFn) {\n        act(() => {\n          closeFn();\n        });\n      } else {\n        task.skipped = true;\n      }\n    };\n  });\n  flushNotice();\n  return result;\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setMessageGlobalConfig,\n  useMessage,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return typeOpen(type, args);\n  };\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actDestroy = noop;\nif (process.env.NODE_ENV === 'test') {\n  actDestroy = () => {\n    message = null;\n  };\n}\nexport default staticMethods;","map":{"version":3,"names":["_toConsumableArray","React","useContext","render","AppConfigContext","ConfigProvider","ConfigContext","globalConfig","warnContext","PurePanel","useMessage","useInternalMessage","wrapPromiseFn","message","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","getContainer","duration","rtl","maxCount","top","mergedContainer","document","body","GlobalHolder","forwardRef","props","ref","messageConfig","sync","getPrefixCls","prefixCls","appConfig","api","holder","Object","assign","useImperativeHandle","instance","keys","forEach","method","apply","arguments","GlobalHolderWrapper","_","setMessageConfig","useState","useEffect","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","theme","getTheme","dom","createElement","iconPrefixCls","holderRender","flushNotice","holderFragment","createDocumentFragment","newMessage","fragment","node","Promise","resolve","then","task","type","skipped","closeFn","open","config","setCloseFn","destroy","key","_message$instance","args","setMessageGlobalConfig","_a","call","result","fn","push","typeOpen","process","env","NODE_ENV","methods","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","_len","length","Array","_key","noop","actWrapper","wrapper","actDestroy"],"sources":["C:/Users/Admin/git/react-node-app/client/node_modules/antd/es/message/index.js"],"sourcesContent":["\"use client\";\r\n\r\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\r\nimport React, { useContext } from 'react';\r\nimport { render } from \"rc-util/es/React/render\";\r\nimport { AppConfigContext } from '../app/context';\r\nimport ConfigProvider, { ConfigContext, globalConfig, warnContext } from '../config-provider';\r\nimport PurePanel from './PurePanel';\r\nimport useMessage, { useInternalMessage } from './useMessage';\r\nimport { wrapPromiseFn } from './util';\r\nlet message = null;\r\nlet act = callback => callback();\r\nlet taskQueue = [];\r\nlet defaultGlobalConfig = {};\r\nfunction getGlobalContext() {\r\n  const {\r\n    getContainer,\r\n    duration,\r\n    rtl,\r\n    maxCount,\r\n    top\r\n  } = defaultGlobalConfig;\r\n  const mergedContainer = (getContainer === null || getContainer === void 0 ? void 0 : getContainer()) || document.body;\r\n  return {\r\n    getContainer: () => mergedContainer,\r\n    duration,\r\n    rtl,\r\n    maxCount,\r\n    top\r\n  };\r\n}\r\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((props, ref) => {\r\n  const {\r\n    messageConfig,\r\n    sync\r\n  } = props;\r\n  const {\r\n    getPrefixCls\r\n  } = useContext(ConfigContext);\r\n  const prefixCls = defaultGlobalConfig.prefixCls || getPrefixCls('message');\r\n  const appConfig = useContext(AppConfigContext);\r\n  const [api, holder] = useInternalMessage(Object.assign(Object.assign(Object.assign({}, messageConfig), {\r\n    prefixCls\r\n  }), appConfig.message));\r\n  React.useImperativeHandle(ref, () => {\r\n    const instance = Object.assign({}, api);\r\n    Object.keys(instance).forEach(method => {\r\n      instance[method] = function () {\r\n        sync();\r\n        return api[method].apply(api, arguments);\r\n      };\r\n    });\r\n    return {\r\n      instance,\r\n      sync\r\n    };\r\n  });\r\n  return holder;\r\n});\r\nconst GlobalHolderWrapper = /*#__PURE__*/React.forwardRef((_, ref) => {\r\n  const [messageConfig, setMessageConfig] = React.useState(getGlobalContext);\r\n  const sync = () => {\r\n    setMessageConfig(getGlobalContext);\r\n  };\r\n  React.useEffect(sync, []);\r\n  const global = globalConfig();\r\n  const rootPrefixCls = global.getRootPrefixCls();\r\n  const rootIconPrefixCls = global.getIconPrefixCls();\r\n  const theme = global.getTheme();\r\n  const dom = /*#__PURE__*/React.createElement(GlobalHolder, {\r\n    ref: ref,\r\n    sync: sync,\r\n    messageConfig: messageConfig\r\n  });\r\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\r\n    prefixCls: rootPrefixCls,\r\n    iconPrefixCls: rootIconPrefixCls,\r\n    theme: theme\r\n  }, global.holderRender ? global.holderRender(dom) : dom);\r\n});\r\nfunction flushNotice() {\r\n  if (!message) {\r\n    const holderFragment = document.createDocumentFragment();\r\n    const newMessage = {\r\n      fragment: holderFragment\r\n    };\r\n    message = newMessage;\r\n    // Delay render to avoid sync issue\r\n    act(() => {\r\n      render( /*#__PURE__*/React.createElement(GlobalHolderWrapper, {\r\n        ref: node => {\r\n          const {\r\n            instance,\r\n            sync\r\n          } = node || {};\r\n          // React 18 test env will throw if call immediately in ref\r\n          Promise.resolve().then(() => {\r\n            if (!newMessage.instance && instance) {\r\n              newMessage.instance = instance;\r\n              newMessage.sync = sync;\r\n              flushNotice();\r\n            }\r\n          });\r\n        }\r\n      }), holderFragment);\r\n    });\r\n    return;\r\n  }\r\n  // Notification not ready\r\n  if (!message.instance) {\r\n    return;\r\n  }\r\n  // >>> Execute task\r\n  taskQueue.forEach(task => {\r\n    const {\r\n      type,\r\n      skipped\r\n    } = task;\r\n    // Only `skipped` when user call notice but cancel it immediately\r\n    // and instance not ready\r\n    if (!skipped) {\r\n      switch (type) {\r\n        case 'open':\r\n          {\r\n            act(() => {\r\n              const closeFn = message.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\r\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\r\n              task.setCloseFn(closeFn);\r\n            });\r\n            break;\r\n          }\r\n        case 'destroy':\r\n          act(() => {\r\n            message === null || message === void 0 ? void 0 : message.instance.destroy(task.key);\r\n          });\r\n          break;\r\n        // Other type open\r\n        default:\r\n          {\r\n            act(() => {\r\n              var _message$instance;\r\n              const closeFn = (_message$instance = message.instance)[type].apply(_message$instance, _toConsumableArray(task.args));\r\n              closeFn === null || closeFn === void 0 ? void 0 : closeFn.then(task.resolve);\r\n              task.setCloseFn(closeFn);\r\n            });\r\n          }\r\n      }\r\n    }\r\n  });\r\n  // Clean up\r\n  taskQueue = [];\r\n}\r\n// ==============================================================================\r\n// ==                                  Export                                  ==\r\n// ==============================================================================\r\nfunction setMessageGlobalConfig(config) {\r\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\r\n  // Trigger sync for it\r\n  act(() => {\r\n    var _a;\r\n    (_a = message === null || message === void 0 ? void 0 : message.sync) === null || _a === void 0 ? void 0 : _a.call(message);\r\n  });\r\n}\r\nfunction open(config) {\r\n  const result = wrapPromiseFn(resolve => {\r\n    let closeFn;\r\n    const task = {\r\n      type: 'open',\r\n      config,\r\n      resolve,\r\n      setCloseFn: fn => {\r\n        closeFn = fn;\r\n      }\r\n    };\r\n    taskQueue.push(task);\r\n    return () => {\r\n      if (closeFn) {\r\n        act(() => {\r\n          closeFn();\r\n        });\r\n      } else {\r\n        task.skipped = true;\r\n      }\r\n    };\r\n  });\r\n  flushNotice();\r\n  return result;\r\n}\r\nfunction typeOpen(type, args) {\r\n  const global = globalConfig();\r\n  if (process.env.NODE_ENV !== 'production' && !global.holderRender) {\r\n    warnContext('message');\r\n  }\r\n  const result = wrapPromiseFn(resolve => {\r\n    let closeFn;\r\n    const task = {\r\n      type,\r\n      args,\r\n      resolve,\r\n      setCloseFn: fn => {\r\n        closeFn = fn;\r\n      }\r\n    };\r\n    taskQueue.push(task);\r\n    return () => {\r\n      if (closeFn) {\r\n        act(() => {\r\n          closeFn();\r\n        });\r\n      } else {\r\n        task.skipped = true;\r\n      }\r\n    };\r\n  });\r\n  flushNotice();\r\n  return result;\r\n}\r\nfunction destroy(key) {\r\n  taskQueue.push({\r\n    type: 'destroy',\r\n    key\r\n  });\r\n  flushNotice();\r\n}\r\nconst methods = ['success', 'info', 'warning', 'error', 'loading'];\r\nconst baseStaticMethods = {\r\n  open,\r\n  destroy,\r\n  config: setMessageGlobalConfig,\r\n  useMessage,\r\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\r\n};\r\nconst staticMethods = baseStaticMethods;\r\nmethods.forEach(type => {\r\n  staticMethods[type] = function () {\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n    return typeOpen(type, args);\r\n  };\r\n});\r\n// ==============================================================================\r\n// ==                                   Test                                   ==\r\n// ==============================================================================\r\nconst noop = () => {};\r\n/** @internal Only Work in test env */\r\n// eslint-disable-next-line import/no-mutable-exports\r\nexport let actWrapper = noop;\r\nif (process.env.NODE_ENV === 'test') {\r\n  actWrapper = wrapper => {\r\n    act = wrapper;\r\n  };\r\n}\r\n/** @internal Only Work in test env */\r\n// eslint-disable-next-line import/no-mutable-exports\r\nexport let actDestroy = noop;\r\nif (process.env.NODE_ENV === 'test') {\r\n  actDestroy = () => {\r\n    message = null;\r\n  };\r\n}\r\nexport default staticMethods;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}