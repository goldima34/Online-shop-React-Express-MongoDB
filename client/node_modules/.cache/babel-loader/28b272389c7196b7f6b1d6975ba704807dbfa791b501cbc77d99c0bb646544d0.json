{"ast":null,"code":"\"use client\";\n\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getSize, getStrokeColor } from './utils';\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\nconst Circle = props => {\n  const {\n    prefixCls,\n    trailColor = null,\n    strokeLinecap = 'round',\n    gapPosition,\n    gapDegree,\n    width: originWidth = 120,\n    type,\n    children,\n    success,\n    size = originWidth\n  } = props;\n  const [width, height] = getSize(size, 'circle');\n  let {\n    strokeWidth\n  } = props;\n  if (strokeWidth === undefined) {\n    strokeWidth = Math.max(getMinPercent(width), 6);\n  }\n  const circleStyle = {\n    width,\n    height,\n    fontSize: width * 0.15 + 6\n  };\n  const realGapDegree = React.useMemo(() => {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  const strokeColor = getStrokeColor({\n    success,\n    strokeColor: props.strokeColor\n  });\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\n    [`${prefixCls}-circle-gradient`]: isGradient\n  });\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: strokeWidth,\n    trailWidth: strokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: realGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, width <= 20 ? ( /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, /*#__PURE__*/React.createElement(\"span\", null, circleContent))) : ( /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children)));\n};\nexport default Circle;","map":{"version":3,"names":["classNames","Circle","RCCircle","React","Tooltip","getPercentage","getSize","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","trailColor","strokeLinecap","gapPosition","gapDegree","originWidth","type","children","success","size","height","strokeWidth","undefined","Math","max","circleStyle","fontSize","realGapDegree","useMemo","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","className","style","title","Fragment"],"sources":["C:/Users/Admin/git/react-node-app/client/node_modules/antd/es/progress/Circle.js"],"sourcesContent":["\"use client\";\r\n\r\nimport classNames from 'classnames';\r\nimport { Circle as RCCircle } from 'rc-progress';\r\nimport * as React from 'react';\r\nimport Tooltip from '../tooltip';\r\nimport { getPercentage, getSize, getStrokeColor } from './utils';\r\nconst CIRCLE_MIN_STROKE_WIDTH = 3;\r\nconst getMinPercent = width => CIRCLE_MIN_STROKE_WIDTH / width * 100;\r\nconst Circle = props => {\r\n  const {\r\n    prefixCls,\r\n    trailColor = null,\r\n    strokeLinecap = 'round',\r\n    gapPosition,\r\n    gapDegree,\r\n    width: originWidth = 120,\r\n    type,\r\n    children,\r\n    success,\r\n    size = originWidth\r\n  } = props;\r\n  const [width, height] = getSize(size, 'circle');\r\n  let {\r\n    strokeWidth\r\n  } = props;\r\n  if (strokeWidth === undefined) {\r\n    strokeWidth = Math.max(getMinPercent(width), 6);\r\n  }\r\n  const circleStyle = {\r\n    width,\r\n    height,\r\n    fontSize: width * 0.15 + 6\r\n  };\r\n  const realGapDegree = React.useMemo(() => {\r\n    // Support gapDeg = 0 when type = 'dashboard'\r\n    if (gapDegree || gapDegree === 0) {\r\n      return gapDegree;\r\n    }\r\n    if (type === 'dashboard') {\r\n      return 75;\r\n    }\r\n    return undefined;\r\n  }, [gapDegree, type]);\r\n  const gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\r\n  // using className to style stroke color\r\n  const isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\r\n  const strokeColor = getStrokeColor({\r\n    success,\r\n    strokeColor: props.strokeColor\r\n  });\r\n  const wrapperClassName = classNames(`${prefixCls}-inner`, {\r\n    [`${prefixCls}-circle-gradient`]: isGradient\r\n  });\r\n  const circleContent = /*#__PURE__*/React.createElement(RCCircle, {\r\n    percent: getPercentage(props),\r\n    strokeWidth: strokeWidth,\r\n    trailWidth: strokeWidth,\r\n    strokeColor: strokeColor,\r\n    strokeLinecap: strokeLinecap,\r\n    trailColor: trailColor,\r\n    prefixCls: prefixCls,\r\n    gapDegree: realGapDegree,\r\n    gapPosition: gapPos\r\n  });\r\n  return /*#__PURE__*/React.createElement(\"div\", {\r\n    className: wrapperClassName,\r\n    style: circleStyle\r\n  }, width <= 20 ? ( /*#__PURE__*/React.createElement(Tooltip, {\r\n    title: children\r\n  }, /*#__PURE__*/React.createElement(\"span\", null, circleContent))) : ( /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children)));\r\n};\r\nexport default Circle;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}