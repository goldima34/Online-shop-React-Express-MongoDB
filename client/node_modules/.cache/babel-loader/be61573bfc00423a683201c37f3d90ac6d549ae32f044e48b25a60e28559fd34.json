{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport * as React from 'react';\nimport { toPathKeys } from \"../utils/commonUtil\";\nexport default function useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues) {\n  // Fill `rawValues` with checked conduction values\n  return React.useMemo(function () {\n    var _getMissingValues = getMissingValues(rawValues),\n      _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\n      existValues = _getMissingValues2[0],\n      missingValues = _getMissingValues2[1];\n    if (!multiple || !rawValues.length) {\n      return [existValues, [], missingValues];\n    }\n    var keyPathValues = toPathKeys(existValues);\n    var keyPathEntities = getPathKeyEntities();\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\n      checkedKeys = _conductCheck.checkedKeys,\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n    // Convert key back to value cells\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]);\n}","map":{"version":3,"names":["_slicedToArray","conductCheck","React","toPathKeys","useValues","multiple","rawValues","getPathKeyEntities","getValueByKeyPath","getMissingValues","useMemo","_getMissingValues","_getMissingValues2","existValues","missingValues","length","keyPathValues","keyPathEntities","_conductCheck","checkedKeys","halfCheckedKeys"],"sources":["C:/Users/golov/coding/git_repo_practice/react-node-app-7/client/node_modules/rc-cascader/es/hooks/useValues.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\r\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\r\nimport * as React from 'react';\r\nimport { toPathKeys } from \"../utils/commonUtil\";\r\nexport default function useValues(multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues) {\r\n  // Fill `rawValues` with checked conduction values\r\n  return React.useMemo(function () {\r\n    var _getMissingValues = getMissingValues(rawValues),\r\n      _getMissingValues2 = _slicedToArray(_getMissingValues, 2),\r\n      existValues = _getMissingValues2[0],\r\n      missingValues = _getMissingValues2[1];\r\n    if (!multiple || !rawValues.length) {\r\n      return [existValues, [], missingValues];\r\n    }\r\n    var keyPathValues = toPathKeys(existValues);\r\n    var keyPathEntities = getPathKeyEntities();\r\n    var _conductCheck = conductCheck(keyPathValues, true, keyPathEntities),\r\n      checkedKeys = _conductCheck.checkedKeys,\r\n      halfCheckedKeys = _conductCheck.halfCheckedKeys;\r\n\r\n    // Convert key back to value cells\r\n    return [getValueByKeyPath(checkedKeys), getValueByKeyPath(halfCheckedKeys), missingValues];\r\n  }, [multiple, rawValues, getPathKeyEntities, getValueByKeyPath, getMissingValues]);\r\n}"],"mappings":"AAAA,OAAOA,cAAc,MAAM,0CAA0C;AACrE,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,qBAAqB;AAChD,eAAe,SAASC,SAASA,CAACC,QAAQ,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,gBAAgB,EAAE;EAC9G;EACA,OAAOP,KAAK,CAACQ,OAAO,CAAC,YAAY;IAC/B,IAAIC,iBAAiB,GAAGF,gBAAgB,CAACH,SAAS,CAAC;MACjDM,kBAAkB,GAAGZ,cAAc,CAACW,iBAAiB,EAAE,CAAC,CAAC;MACzDE,WAAW,GAAGD,kBAAkB,CAAC,CAAC,CAAC;MACnCE,aAAa,GAAGF,kBAAkB,CAAC,CAAC,CAAC;IACvC,IAAI,CAACP,QAAQ,IAAI,CAACC,SAAS,CAACS,MAAM,EAAE;MAClC,OAAO,CAACF,WAAW,EAAE,EAAE,EAAEC,aAAa,CAAC;IACzC;IACA,IAAIE,aAAa,GAAGb,UAAU,CAACU,WAAW,CAAC;IAC3C,IAAII,eAAe,GAAGV,kBAAkB,CAAC,CAAC;IAC1C,IAAIW,aAAa,GAAGjB,YAAY,CAACe,aAAa,EAAE,IAAI,EAAEC,eAAe,CAAC;MACpEE,WAAW,GAAGD,aAAa,CAACC,WAAW;MACvCC,eAAe,GAAGF,aAAa,CAACE,eAAe;;IAEjD;IACA,OAAO,CAACZ,iBAAiB,CAACW,WAAW,CAAC,EAAEX,iBAAiB,CAACY,eAAe,CAAC,EAAEN,aAAa,CAAC;EAC5F,CAAC,EAAE,CAACT,QAAQ,EAAEC,SAAS,EAAEC,kBAAkB,EAAEC,iBAAiB,EAAEC,gBAAgB,CAAC,CAAC;AACpF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}