{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport warning from \"rc-util/es/warning\";\nimport getEntity from \"./keyUtil\";\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getKey(key, pos) {\n  if (key !== null && key !== undefined) {\n    return key;\n  }\n  return pos;\n}\nexport function fillFieldNames(fieldNames) {\n  var _ref = fieldNames || {},\n    title = _ref.title,\n    _title = _ref._title,\n    key = _ref.key,\n    children = _ref.children;\n  var mergedTitle = title || 'title';\n  return {\n    title: mergedTitle,\n    _title: _title || [mergedTitle],\n    key: key || 'key',\n    children: children || 'children'\n  };\n}\n\n/**\r\n * Warning if TreeNode do not provides key\r\n */\nexport function warningWithoutKey(treeData, fieldNames) {\n  var keys = new Map();\n  function dig(list) {\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    (list || []).forEach(function (treeNode) {\n      var key = treeNode[fieldNames.key];\n      var children = treeNode[fieldNames.children];\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\n      var recordKey = String(key);\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\n      keys.set(recordKey, true);\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\n    });\n  }\n  dig(treeData);\n}\n\n/**\r\n * Convert `children` of Tree into `treeData` structure.\r\n */\nexport function convertTreeToData(rootNodes) {\n  function dig(node) {\n    var treeNodes = toArray(node);\n    return treeNodes.map(function (treeNode) {\n      // Filter invalidate node\n      if (!isTreeNode(treeNode)) {\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\n        return null;\n      }\n      var key = treeNode.key;\n      var _treeNode$props = treeNode.props,\n        children = _treeNode$props.children,\n        rest = _objectWithoutProperties(_treeNode$props, _excluded);\n      var dataNode = _objectSpread({\n        key: key\n      }, rest);\n      var parsedChildren = dig(children);\n      if (parsedChildren.length) {\n        dataNode.children = parsedChildren;\n      }\n      return dataNode;\n    }).filter(function (dataNode) {\n      return dataNode;\n    });\n  }\n  return dig(rootNodes);\n}\n\n/**\r\n * Flat nest tree data into flatten list. This is used for virtual list render.\r\n * @param treeNodeList Origin data node list\r\n * @param expandedKeys\r\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\r\n */\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\n  var _fillFieldNames = fillFieldNames(fieldNames),\n    fieldTitles = _fillFieldNames._title,\n    fieldKey = _fillFieldNames.key,\n    fieldChildren = _fillFieldNames.children;\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\n  var flattenList = [];\n  function dig(list) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return list.map(function (treeNode, index) {\n      var pos = getPosition(parent ? parent.pos : '0', index);\n      var mergedKey = getKey(treeNode[fieldKey], pos);\n\n      // Pick matched title in field title list\n      var mergedTitle;\n      for (var i = 0; i < fieldTitles.length; i += 1) {\n        var fieldTitle = fieldTitles[i];\n        if (treeNode[fieldTitle] !== undefined) {\n          mergedTitle = treeNode[fieldTitle];\n          break;\n        }\n      }\n\n      // Add FlattenDataNode into list\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\n        title: mergedTitle,\n        key: mergedKey,\n        parent: parent,\n        pos: pos,\n        children: null,\n        data: treeNode,\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\n      });\n      flattenList.push(flattenNode);\n\n      // Loop treeNode children\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\n      } else {\n        flattenNode.children = [];\n      }\n      return flattenNode;\n    });\n  }\n  dig(treeNodeList);\n  return flattenList;\n}\n/**\r\n * Traverse all the data by `treeData`.\r\n * Please not use it out of the `rc-tree` since we may refactor this code.\r\n */\nexport function traverseDataNodes(dataNodes, callback,\n// To avoid too many params, let use config instead of origin param\nconfig) {\n  var mergedConfig = {};\n  if (_typeof(config) === 'object') {\n    mergedConfig = config;\n  } else {\n    mergedConfig = {\n      externalGetKey: config\n    };\n  }\n  mergedConfig = mergedConfig || {};\n\n  // Init config\n  var _mergedConfig = mergedConfig,\n    childrenPropName = _mergedConfig.childrenPropName,\n    externalGetKey = _mergedConfig.externalGetKey,\n    fieldNames = _mergedConfig.fieldNames;\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\n    fieldKey = _fillFieldNames2.key,\n    fieldChildren = _fillFieldNames2.children;\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\n\n  // Get keys\n  var syntheticGetKey;\n  if (externalGetKey) {\n    if (typeof externalGetKey === 'string') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return node[externalGetKey];\n      };\n    } else if (typeof externalGetKey === 'function') {\n      syntheticGetKey = function syntheticGetKey(node) {\n        return externalGetKey(node);\n      };\n    }\n  } else {\n    syntheticGetKey = function syntheticGetKey(node, pos) {\n      return getKey(node[fieldKey], pos);\n    };\n  }\n\n  // Process\n  function processNode(node, index, parent, pathNodes) {\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\n    var pos = node ? getPosition(parent.pos, index) : '0';\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\n\n    // Process node if is not root\n    if (node) {\n      var key = syntheticGetKey(node, pos);\n      var _data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: key,\n        parentPos: parent.node ? parent.pos : null,\n        level: parent.level + 1,\n        nodes: connectNodes\n      };\n      callback(_data);\n    }\n\n    // Process children node\n    if (children) {\n      children.forEach(function (subNode, subIndex) {\n        processNode(subNode, subIndex, {\n          node: node,\n          pos: pos,\n          level: parent ? parent.level + 1 : -1\n        }, connectNodes);\n      });\n    }\n  }\n  processNode(null);\n}\n/**\r\n * Convert `treeData` into entity records.\r\n */\nexport function convertDataToEntities(dataNodes) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref2.initWrapper,\n    processEntity = _ref2.processEntity,\n    onProcessFinished = _ref2.onProcessFinished,\n    externalGetKey = _ref2.externalGetKey,\n    childrenPropName = _ref2.childrenPropName,\n    fieldNames = _ref2.fieldNames;\n  var /** @deprecated Use `config.externalGetKey` instead */\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\n  // Init config\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseDataNodes(dataNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos,\n      level = item.level,\n      nodes = item.nodes;\n    var entity = {\n      node: node,\n      nodes: nodes,\n      index: index,\n      key: key,\n      pos: pos,\n      level: level\n    };\n    var mergedKey = getKey(key, pos);\n    posEntities[pos] = entity;\n    keyEntities[mergedKey] = entity;\n\n    // Fill children\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  }, {\n    externalGetKey: mergedExternalGetKey,\n    childrenPropName: childrenPropName,\n    fieldNames: fieldNames\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\r\n * Get TreeNode props with Tree props.\r\n */\nexport function getTreeNodeProps(key, _ref3) {\n  var expandedKeys = _ref3.expandedKeys,\n    selectedKeys = _ref3.selectedKeys,\n    loadedKeys = _ref3.loadedKeys,\n    loadingKeys = _ref3.loadingKeys,\n    checkedKeys = _ref3.checkedKeys,\n    halfCheckedKeys = _ref3.halfCheckedKeys,\n    dragOverNodeKey = _ref3.dragOverNodeKey,\n    dropPosition = _ref3.dropPosition,\n    keyEntities = _ref3.keyEntities;\n  var entity = getEntity(keyEntities, key);\n  var treeNodeProps = {\n    eventKey: key,\n    expanded: expandedKeys.indexOf(key) !== -1,\n    selected: selectedKeys.indexOf(key) !== -1,\n    loaded: loadedKeys.indexOf(key) !== -1,\n    loading: loadingKeys.indexOf(key) !== -1,\n    checked: checkedKeys.indexOf(key) !== -1,\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\n    pos: String(entity ? entity.pos : ''),\n    // [Legacy] Drag props\n    // Since the interaction of drag is changed, the semantic of the props are\n    // not accuracy, I think it should be finally removed\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\n  };\n  return treeNodeProps;\n}\nexport function convertNodePropsToEventData(props) {\n  var data = props.data,\n    expanded = props.expanded,\n    selected = props.selected,\n    checked = props.checked,\n    loaded = props.loaded,\n    loading = props.loading,\n    halfChecked = props.halfChecked,\n    dragOver = props.dragOver,\n    dragOverGapTop = props.dragOverGapTop,\n    dragOverGapBottom = props.dragOverGapBottom,\n    pos = props.pos,\n    active = props.active,\n    eventKey = props.eventKey;\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\n    expanded: expanded,\n    selected: selected,\n    checked: checked,\n    loaded: loaded,\n    loading: loading,\n    halfChecked: halfChecked,\n    dragOver: dragOver,\n    dragOverGapTop: dragOverGapTop,\n    dragOverGapBottom: dragOverGapBottom,\n    pos: pos,\n    active: active,\n    key: eventKey\n  });\n  if (!('props' in eventData)) {\n    Object.defineProperty(eventData, 'props', {\n      get: function get() {\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\n        return props;\n      }\n    });\n  }\n  return eventData;\n}","map":{"version":3,"names":["_typeof","_toConsumableArray","_objectSpread","_objectWithoutProperties","_excluded","toArray","omit","warning","getEntity","getPosition","level","index","concat","isTreeNode","node","type","getKey","key","pos","undefined","fillFieldNames","fieldNames","_ref","title","_title","children","mergedTitle","warningWithoutKey","treeData","keys","Map","dig","list","path","arguments","length","forEach","treeNode","recordKey","String","has","set","convertTreeToData","rootNodes","treeNodes","map","_treeNode$props","props","rest","dataNode","parsedChildren","filter","flattenTreeData","treeNodeList","expandedKeys","_fillFieldNames","fieldTitles","fieldKey","fieldChildren","expandedKeySet","Set","flattenList","parent","mergedKey","i","fieldTitle","flattenNode","data","isStart","isEnd","push","traverseDataNodes","dataNodes","callback","config","mergedConfig","externalGetKey","_mergedConfig","childrenPropName","_fillFieldNames2","mergeChildrenPropName","syntheticGetKey","processNode","pathNodes","connectNodes","_data","parentPos","nodes","subNode","subIndex","convertDataToEntities","_ref2","initWrapper","processEntity","onProcessFinished","legacyExternalGetKey","mergedExternalGetKey","posEntities","keyEntities","wrapper","item","entity","getTreeNodeProps","_ref3","selectedKeys","loadedKeys","loadingKeys","checkedKeys","halfCheckedKeys","dragOverNodeKey","dropPosition","treeNodeProps","eventKey","expanded","indexOf","selected","loaded","loading","checked","halfChecked","dragOver","dragOverGapTop","dragOverGapBottom","convertNodePropsToEventData","active","eventData","Object","defineProperty","get"],"sources":["C:/Users/Admin/git/react-node-app/client/node_modules/rc-tree/es/utils/treeUtil.js"],"sourcesContent":["import _typeof from \"@babel/runtime/helpers/esm/typeof\";\r\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\r\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nvar _excluded = [\"children\"];\r\nimport toArray from \"rc-util/es/Children/toArray\";\r\nimport omit from \"rc-util/es/omit\";\r\nimport warning from \"rc-util/es/warning\";\r\nimport getEntity from \"./keyUtil\";\r\nexport function getPosition(level, index) {\r\n  return \"\".concat(level, \"-\").concat(index);\r\n}\r\nexport function isTreeNode(node) {\r\n  return node && node.type && node.type.isTreeNode;\r\n}\r\nexport function getKey(key, pos) {\r\n  if (key !== null && key !== undefined) {\r\n    return key;\r\n  }\r\n  return pos;\r\n}\r\nexport function fillFieldNames(fieldNames) {\r\n  var _ref = fieldNames || {},\r\n    title = _ref.title,\r\n    _title = _ref._title,\r\n    key = _ref.key,\r\n    children = _ref.children;\r\n  var mergedTitle = title || 'title';\r\n  return {\r\n    title: mergedTitle,\r\n    _title: _title || [mergedTitle],\r\n    key: key || 'key',\r\n    children: children || 'children'\r\n  };\r\n}\r\n\r\n/**\r\n * Warning if TreeNode do not provides key\r\n */\r\nexport function warningWithoutKey(treeData, fieldNames) {\r\n  var keys = new Map();\r\n  function dig(list) {\r\n    var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\r\n    (list || []).forEach(function (treeNode) {\r\n      var key = treeNode[fieldNames.key];\r\n      var children = treeNode[fieldNames.children];\r\n      warning(key !== null && key !== undefined, \"Tree node must have a certain key: [\".concat(path).concat(key, \"]\"));\r\n      var recordKey = String(key);\r\n      warning(!keys.has(recordKey) || key === null || key === undefined, \"Same 'key' exist in the Tree: \".concat(recordKey));\r\n      keys.set(recordKey, true);\r\n      dig(children, \"\".concat(path).concat(recordKey, \" > \"));\r\n    });\r\n  }\r\n  dig(treeData);\r\n}\r\n\r\n/**\r\n * Convert `children` of Tree into `treeData` structure.\r\n */\r\nexport function convertTreeToData(rootNodes) {\r\n  function dig(node) {\r\n    var treeNodes = toArray(node);\r\n    return treeNodes.map(function (treeNode) {\r\n      // Filter invalidate node\r\n      if (!isTreeNode(treeNode)) {\r\n        warning(!treeNode, 'Tree/TreeNode can only accept TreeNode as children.');\r\n        return null;\r\n      }\r\n      var key = treeNode.key;\r\n      var _treeNode$props = treeNode.props,\r\n        children = _treeNode$props.children,\r\n        rest = _objectWithoutProperties(_treeNode$props, _excluded);\r\n      var dataNode = _objectSpread({\r\n        key: key\r\n      }, rest);\r\n      var parsedChildren = dig(children);\r\n      if (parsedChildren.length) {\r\n        dataNode.children = parsedChildren;\r\n      }\r\n      return dataNode;\r\n    }).filter(function (dataNode) {\r\n      return dataNode;\r\n    });\r\n  }\r\n  return dig(rootNodes);\r\n}\r\n\r\n/**\r\n * Flat nest tree data into flatten list. This is used for virtual list render.\r\n * @param treeNodeList Origin data node list\r\n * @param expandedKeys\r\n * need expanded keys, provides `true` means all expanded (used in `rc-tree-select`).\r\n */\r\nexport function flattenTreeData(treeNodeList, expandedKeys, fieldNames) {\r\n  var _fillFieldNames = fillFieldNames(fieldNames),\r\n    fieldTitles = _fillFieldNames._title,\r\n    fieldKey = _fillFieldNames.key,\r\n    fieldChildren = _fillFieldNames.children;\r\n  var expandedKeySet = new Set(expandedKeys === true ? [] : expandedKeys);\r\n  var flattenList = [];\r\n  function dig(list) {\r\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\r\n    return list.map(function (treeNode, index) {\r\n      var pos = getPosition(parent ? parent.pos : '0', index);\r\n      var mergedKey = getKey(treeNode[fieldKey], pos);\r\n\r\n      // Pick matched title in field title list\r\n      var mergedTitle;\r\n      for (var i = 0; i < fieldTitles.length; i += 1) {\r\n        var fieldTitle = fieldTitles[i];\r\n        if (treeNode[fieldTitle] !== undefined) {\r\n          mergedTitle = treeNode[fieldTitle];\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add FlattenDataNode into list\r\n      var flattenNode = _objectSpread(_objectSpread({}, omit(treeNode, [].concat(_toConsumableArray(fieldTitles), [fieldKey, fieldChildren]))), {}, {\r\n        title: mergedTitle,\r\n        key: mergedKey,\r\n        parent: parent,\r\n        pos: pos,\r\n        children: null,\r\n        data: treeNode,\r\n        isStart: [].concat(_toConsumableArray(parent ? parent.isStart : []), [index === 0]),\r\n        isEnd: [].concat(_toConsumableArray(parent ? parent.isEnd : []), [index === list.length - 1])\r\n      });\r\n      flattenList.push(flattenNode);\r\n\r\n      // Loop treeNode children\r\n      if (expandedKeys === true || expandedKeySet.has(mergedKey)) {\r\n        flattenNode.children = dig(treeNode[fieldChildren] || [], flattenNode);\r\n      } else {\r\n        flattenNode.children = [];\r\n      }\r\n      return flattenNode;\r\n    });\r\n  }\r\n  dig(treeNodeList);\r\n  return flattenList;\r\n}\r\n/**\r\n * Traverse all the data by `treeData`.\r\n * Please not use it out of the `rc-tree` since we may refactor this code.\r\n */\r\nexport function traverseDataNodes(dataNodes, callback,\r\n// To avoid too many params, let use config instead of origin param\r\nconfig) {\r\n  var mergedConfig = {};\r\n  if (_typeof(config) === 'object') {\r\n    mergedConfig = config;\r\n  } else {\r\n    mergedConfig = {\r\n      externalGetKey: config\r\n    };\r\n  }\r\n  mergedConfig = mergedConfig || {};\r\n\r\n  // Init config\r\n  var _mergedConfig = mergedConfig,\r\n    childrenPropName = _mergedConfig.childrenPropName,\r\n    externalGetKey = _mergedConfig.externalGetKey,\r\n    fieldNames = _mergedConfig.fieldNames;\r\n  var _fillFieldNames2 = fillFieldNames(fieldNames),\r\n    fieldKey = _fillFieldNames2.key,\r\n    fieldChildren = _fillFieldNames2.children;\r\n  var mergeChildrenPropName = childrenPropName || fieldChildren;\r\n\r\n  // Get keys\r\n  var syntheticGetKey;\r\n  if (externalGetKey) {\r\n    if (typeof externalGetKey === 'string') {\r\n      syntheticGetKey = function syntheticGetKey(node) {\r\n        return node[externalGetKey];\r\n      };\r\n    } else if (typeof externalGetKey === 'function') {\r\n      syntheticGetKey = function syntheticGetKey(node) {\r\n        return externalGetKey(node);\r\n      };\r\n    }\r\n  } else {\r\n    syntheticGetKey = function syntheticGetKey(node, pos) {\r\n      return getKey(node[fieldKey], pos);\r\n    };\r\n  }\r\n\r\n  // Process\r\n  function processNode(node, index, parent, pathNodes) {\r\n    var children = node ? node[mergeChildrenPropName] : dataNodes;\r\n    var pos = node ? getPosition(parent.pos, index) : '0';\r\n    var connectNodes = node ? [].concat(_toConsumableArray(pathNodes), [node]) : [];\r\n\r\n    // Process node if is not root\r\n    if (node) {\r\n      var key = syntheticGetKey(node, pos);\r\n      var _data = {\r\n        node: node,\r\n        index: index,\r\n        pos: pos,\r\n        key: key,\r\n        parentPos: parent.node ? parent.pos : null,\r\n        level: parent.level + 1,\r\n        nodes: connectNodes\r\n      };\r\n      callback(_data);\r\n    }\r\n\r\n    // Process children node\r\n    if (children) {\r\n      children.forEach(function (subNode, subIndex) {\r\n        processNode(subNode, subIndex, {\r\n          node: node,\r\n          pos: pos,\r\n          level: parent ? parent.level + 1 : -1\r\n        }, connectNodes);\r\n      });\r\n    }\r\n  }\r\n  processNode(null);\r\n}\r\n/**\r\n * Convert `treeData` into entity records.\r\n */\r\nexport function convertDataToEntities(dataNodes) {\r\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n    initWrapper = _ref2.initWrapper,\r\n    processEntity = _ref2.processEntity,\r\n    onProcessFinished = _ref2.onProcessFinished,\r\n    externalGetKey = _ref2.externalGetKey,\r\n    childrenPropName = _ref2.childrenPropName,\r\n    fieldNames = _ref2.fieldNames;\r\n  var /** @deprecated Use `config.externalGetKey` instead */\r\n  legacyExternalGetKey = arguments.length > 2 ? arguments[2] : undefined;\r\n  // Init config\r\n  var mergedExternalGetKey = externalGetKey || legacyExternalGetKey;\r\n  var posEntities = {};\r\n  var keyEntities = {};\r\n  var wrapper = {\r\n    posEntities: posEntities,\r\n    keyEntities: keyEntities\r\n  };\r\n  if (initWrapper) {\r\n    wrapper = initWrapper(wrapper) || wrapper;\r\n  }\r\n  traverseDataNodes(dataNodes, function (item) {\r\n    var node = item.node,\r\n      index = item.index,\r\n      pos = item.pos,\r\n      key = item.key,\r\n      parentPos = item.parentPos,\r\n      level = item.level,\r\n      nodes = item.nodes;\r\n    var entity = {\r\n      node: node,\r\n      nodes: nodes,\r\n      index: index,\r\n      key: key,\r\n      pos: pos,\r\n      level: level\r\n    };\r\n    var mergedKey = getKey(key, pos);\r\n    posEntities[pos] = entity;\r\n    keyEntities[mergedKey] = entity;\r\n\r\n    // Fill children\r\n    entity.parent = posEntities[parentPos];\r\n    if (entity.parent) {\r\n      entity.parent.children = entity.parent.children || [];\r\n      entity.parent.children.push(entity);\r\n    }\r\n    if (processEntity) {\r\n      processEntity(entity, wrapper);\r\n    }\r\n  }, {\r\n    externalGetKey: mergedExternalGetKey,\r\n    childrenPropName: childrenPropName,\r\n    fieldNames: fieldNames\r\n  });\r\n  if (onProcessFinished) {\r\n    onProcessFinished(wrapper);\r\n  }\r\n  return wrapper;\r\n}\r\n/**\r\n * Get TreeNode props with Tree props.\r\n */\r\nexport function getTreeNodeProps(key, _ref3) {\r\n  var expandedKeys = _ref3.expandedKeys,\r\n    selectedKeys = _ref3.selectedKeys,\r\n    loadedKeys = _ref3.loadedKeys,\r\n    loadingKeys = _ref3.loadingKeys,\r\n    checkedKeys = _ref3.checkedKeys,\r\n    halfCheckedKeys = _ref3.halfCheckedKeys,\r\n    dragOverNodeKey = _ref3.dragOverNodeKey,\r\n    dropPosition = _ref3.dropPosition,\r\n    keyEntities = _ref3.keyEntities;\r\n  var entity = getEntity(keyEntities, key);\r\n  var treeNodeProps = {\r\n    eventKey: key,\r\n    expanded: expandedKeys.indexOf(key) !== -1,\r\n    selected: selectedKeys.indexOf(key) !== -1,\r\n    loaded: loadedKeys.indexOf(key) !== -1,\r\n    loading: loadingKeys.indexOf(key) !== -1,\r\n    checked: checkedKeys.indexOf(key) !== -1,\r\n    halfChecked: halfCheckedKeys.indexOf(key) !== -1,\r\n    pos: String(entity ? entity.pos : ''),\r\n    // [Legacy] Drag props\r\n    // Since the interaction of drag is changed, the semantic of the props are\r\n    // not accuracy, I think it should be finally removed\r\n    dragOver: dragOverNodeKey === key && dropPosition === 0,\r\n    dragOverGapTop: dragOverNodeKey === key && dropPosition === -1,\r\n    dragOverGapBottom: dragOverNodeKey === key && dropPosition === 1\r\n  };\r\n  return treeNodeProps;\r\n}\r\nexport function convertNodePropsToEventData(props) {\r\n  var data = props.data,\r\n    expanded = props.expanded,\r\n    selected = props.selected,\r\n    checked = props.checked,\r\n    loaded = props.loaded,\r\n    loading = props.loading,\r\n    halfChecked = props.halfChecked,\r\n    dragOver = props.dragOver,\r\n    dragOverGapTop = props.dragOverGapTop,\r\n    dragOverGapBottom = props.dragOverGapBottom,\r\n    pos = props.pos,\r\n    active = props.active,\r\n    eventKey = props.eventKey;\r\n  var eventData = _objectSpread(_objectSpread({}, data), {}, {\r\n    expanded: expanded,\r\n    selected: selected,\r\n    checked: checked,\r\n    loaded: loaded,\r\n    loading: loading,\r\n    halfChecked: halfChecked,\r\n    dragOver: dragOver,\r\n    dragOverGapTop: dragOverGapTop,\r\n    dragOverGapBottom: dragOverGapBottom,\r\n    pos: pos,\r\n    active: active,\r\n    key: eventKey\r\n  });\r\n  if (!('props' in eventData)) {\r\n    Object.defineProperty(eventData, 'props', {\r\n      get: function get() {\r\n        warning(false, 'Second param return from event is node data instead of TreeNode instance. Please read value directly instead of reading from `props`.');\r\n        return props;\r\n      }\r\n    });\r\n  }\r\n  return eventData;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}