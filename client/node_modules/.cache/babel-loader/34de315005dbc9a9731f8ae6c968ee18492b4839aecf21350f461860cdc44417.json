{"ast":null,"code":"import { unit } from '@ant-design/cssinjs';\nimport { prepareComponentToken, prepareToken } from '.';\nimport { resetComponent } from '../../style';\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\n// ============================== Ribbon ==============================\nconst genRibbonStyle = token => {\n  const {\n    antCls,\n    badgeFontHeight,\n    marginXS,\n    badgeRibbonOffset,\n    calc\n  } = token;\n  const ribbonPrefixCls = `${antCls}-ribbon`;\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\n    let {\n      darkColor\n    } = _ref;\n    return {\n      [`&${ribbonPrefixCls}-color-${colorKey}`]: {\n        background: darkColor,\n        color: darkColor\n      }\n    };\n  });\n  return {\n    [`${ribbonWrapperPrefixCls}`]: {\n      position: 'relative'\n    },\n    [`${ribbonPrefixCls}`]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\n      position: 'absolute',\n      top: marginXS,\n      padding: `0 ${unit(token.paddingXS)}`,\n      color: token.colorPrimary,\n      lineHeight: unit(badgeFontHeight),\n      whiteSpace: 'nowrap',\n      backgroundColor: token.colorPrimary,\n      borderRadius: token.borderRadiusSM,\n      [`${ribbonPrefixCls}-text`]: {\n        color: token.colorTextLightSolid\n      },\n      [`${ribbonPrefixCls}-corner`]: {\n        position: 'absolute',\n        top: '100%',\n        width: badgeRibbonOffset,\n        height: badgeRibbonOffset,\n        color: 'currentcolor',\n        border: `${unit(calc(badgeRibbonOffset).div(2).equal())} solid`,\n        transform: token.badgeRibbonCornerTransform,\n        transformOrigin: 'top',\n        filter: token.badgeRibbonCornerFilter\n      }\n    }), statusRibbonPreset), {\n      [`&${ribbonPrefixCls}-placement-end`]: {\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndEndRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineEnd: 0,\n          borderInlineEndColor: 'transparent',\n          borderBlockEndColor: 'transparent'\n        }\n      },\n      [`&${ribbonPrefixCls}-placement-start`]: {\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\n        borderEndStartRadius: 0,\n        [`${ribbonPrefixCls}-corner`]: {\n          insetInlineStart: 0,\n          borderBlockEndColor: 'transparent',\n          borderInlineStartColor: 'transparent'\n        }\n      },\n      // ====================== RTL =======================\n      '&-rtl': {\n        direction: 'rtl'\n      }\n    })\n  };\n};\n// ============================== Export ==============================\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\n  const badgeToken = prepareToken(token);\n  return genRibbonStyle(badgeToken);\n}, prepareComponentToken);","map":{"version":3,"names":["unit","prepareComponentToken","prepareToken","resetComponent","genPresetColor","genStyleHooks","genRibbonStyle","token","antCls","badgeFontHeight","marginXS","badgeRibbonOffset","calc","ribbonPrefixCls","ribbonWrapperPrefixCls","statusRibbonPreset","colorKey","_ref","darkColor","background","color","position","Object","assign","top","padding","paddingXS","colorPrimary","lineHeight","whiteSpace","backgroundColor","borderRadius","borderRadiusSM","colorTextLightSolid","width","height","border","div","equal","transform","badgeRibbonCornerTransform","transformOrigin","filter","badgeRibbonCornerFilter","insetInlineEnd","mul","borderEndEndRadius","borderInlineEndColor","borderBlockEndColor","insetInlineStart","borderEndStartRadius","borderInlineStartColor","direction","badgeToken"],"sources":["C:/Users/golov/coding/git_repo_practice/react-node-app-7/client/node_modules/antd/es/badge/style/ribbon.js"],"sourcesContent":["import { unit } from '@ant-design/cssinjs';\r\nimport { prepareComponentToken, prepareToken } from '.';\r\nimport { resetComponent } from '../../style';\r\nimport { genPresetColor, genStyleHooks } from '../../theme/internal';\r\n// ============================== Ribbon ==============================\r\nconst genRibbonStyle = token => {\r\n  const {\r\n    antCls,\r\n    badgeFontHeight,\r\n    marginXS,\r\n    badgeRibbonOffset,\r\n    calc\r\n  } = token;\r\n  const ribbonPrefixCls = `${antCls}-ribbon`;\r\n  const ribbonWrapperPrefixCls = `${antCls}-ribbon-wrapper`;\r\n  const statusRibbonPreset = genPresetColor(token, (colorKey, _ref) => {\r\n    let {\r\n      darkColor\r\n    } = _ref;\r\n    return {\r\n      [`&${ribbonPrefixCls}-color-${colorKey}`]: {\r\n        background: darkColor,\r\n        color: darkColor\r\n      }\r\n    };\r\n  });\r\n  return {\r\n    [`${ribbonWrapperPrefixCls}`]: {\r\n      position: 'relative'\r\n    },\r\n    [`${ribbonPrefixCls}`]: Object.assign(Object.assign(Object.assign(Object.assign({}, resetComponent(token)), {\r\n      position: 'absolute',\r\n      top: marginXS,\r\n      padding: `0 ${unit(token.paddingXS)}`,\r\n      color: token.colorPrimary,\r\n      lineHeight: unit(badgeFontHeight),\r\n      whiteSpace: 'nowrap',\r\n      backgroundColor: token.colorPrimary,\r\n      borderRadius: token.borderRadiusSM,\r\n      [`${ribbonPrefixCls}-text`]: {\r\n        color: token.colorTextLightSolid\r\n      },\r\n      [`${ribbonPrefixCls}-corner`]: {\r\n        position: 'absolute',\r\n        top: '100%',\r\n        width: badgeRibbonOffset,\r\n        height: badgeRibbonOffset,\r\n        color: 'currentcolor',\r\n        border: `${unit(calc(badgeRibbonOffset).div(2).equal())} solid`,\r\n        transform: token.badgeRibbonCornerTransform,\r\n        transformOrigin: 'top',\r\n        filter: token.badgeRibbonCornerFilter\r\n      }\r\n    }), statusRibbonPreset), {\r\n      [`&${ribbonPrefixCls}-placement-end`]: {\r\n        insetInlineEnd: calc(badgeRibbonOffset).mul(-1).equal(),\r\n        borderEndEndRadius: 0,\r\n        [`${ribbonPrefixCls}-corner`]: {\r\n          insetInlineEnd: 0,\r\n          borderInlineEndColor: 'transparent',\r\n          borderBlockEndColor: 'transparent'\r\n        }\r\n      },\r\n      [`&${ribbonPrefixCls}-placement-start`]: {\r\n        insetInlineStart: calc(badgeRibbonOffset).mul(-1).equal(),\r\n        borderEndStartRadius: 0,\r\n        [`${ribbonPrefixCls}-corner`]: {\r\n          insetInlineStart: 0,\r\n          borderBlockEndColor: 'transparent',\r\n          borderInlineStartColor: 'transparent'\r\n        }\r\n      },\r\n      // ====================== RTL =======================\r\n      '&-rtl': {\r\n        direction: 'rtl'\r\n      }\r\n    })\r\n  };\r\n};\r\n// ============================== Export ==============================\r\nexport default genStyleHooks(['Badge', 'Ribbon'], token => {\r\n  const badgeToken = prepareToken(token);\r\n  return genRibbonStyle(badgeToken);\r\n}, prepareComponentToken);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}